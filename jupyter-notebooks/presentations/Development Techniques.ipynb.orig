{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Desarrollando Codigo *Saludable* y Longevo\n",
    "\n",
    "**Autor**: Simon Torres\n",
    "\n",
    "**Version**: 0.1\n",
    "\n",
    "**Fecha**: 9 de Septiembre de 2019\n",
    "\n",
    "Python es extremadamente flexible en cuanto a sintaxis. Pero existen reglas muy claras sobre estilo.\n",
    "\n",
    "**PEP** == **Python Enhancement Proposal**\n",
    "\n",
    "(APE == Astropy Enhacemente Proposal)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Software Packaging\n",
    "\n",
    "### Estructura de directorios\n",
    "\n",
    "El siguiente ejemplo muestra un ejemplo para un paquete llamado `light_checker`\n",
    "\n",
    "```\n",
    "light_checker/\n",
    "    docs/\n",
    "        conf.py\n",
    "        index.rst\n",
    "    light_checker/\n",
    "        switches/\n",
    "            tests/\n",
    "                __init__.py\n",
    "                test_switches.py\n",
    "            __init__.py\n",
    "            switches.py\n",
    "        bulbs/\n",
    "            tests/\n",
    "                __init__.py\n",
    "                test_bulbs.py\n",
    "            __init__.py\n",
    "            bulbs.py\n",
    "        \n",
    "        __init__.py\n",
    "        version.py\n",
    "    README.md\n",
    "    LICENSE.md\n",
    "    setup.cfg\n",
    "    setup.py\n",
    "    .gitignore\n",
    "    .readthedocs.yml\n",
    "    requirements.txt\n",
    "    environment.yml\n",
    "    .travis.yml\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estilo\n",
    "\n",
    "Independiente si se decide guiarse por las reglas de estilo lo mas importante es **ser consistente** con su eleccion o no eleccion. Optar por seguir las reglas definidas en [PEP8](https://www.python.org/dev/peps/pep-0008/) tiene varios beneficios como por ejemplo:\n",
    "- es la regla \"oficial\" de Python\n",
    "- Existen herramientas que la traen incorporada (PyCharm).\n",
    "- El codigo se lee mas veces que las que se escribe asi que debe estar bien escrito y ser leible por humanos\n",
    "- Permite que todo el equipo hable en \"el mismo idioma\"\n",
    "\n",
    "**Hay que ser riguroso en ser consistente y seguir las reglas de estilo pero a la vez hay que ser flexible**\n",
    "\n",
    "el [Zen de Python](https://www.python.org/dev/peps/pep-0020/)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "Beautiful is better than ugly.\n",
    "Explicit is better than implicit.\n",
    "Simple is better than complex.\n",
    "Complex is better than complicated.\n",
    "Flat is better than nested.\n",
    "Sparse is better than dense.\n",
    "Readability counts.\n",
    "Special cases aren't special enough to break the rules.\n",
    "Although practicality beats purity.\n",
    "Errors should never pass silently.\n",
    "Unless explicitly silenced.\n",
    "In the face of ambiguity, refuse the temptation to guess.\n",
    "There should be one-- and preferably only one --obvious way to do it.\n",
    "Although that way may not be obvious at first unless you're Dutch.\n",
    "Now is better than never.\n",
    "Although never is often better than *right* now.\n",
    "If the implementation is hard to explain, it's a bad idea.\n",
    "If the implementation is easy to explain, it may be a good idea.\n",
    "Namespaces are one honking great idea -- let's do more of those!```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Variables y Funciones\n",
    "\n",
    "Debe ser un nombre descriptivo con _lower case_  separado por underscore.\n",
    "\n",
    "Ejemplo:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-09-09T19:59:36.249179Z",
     "start_time": "2019-09-09T19:59:36.239006Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy\n",
    "\n",
    "# buen ejemplo\n",
    "open_cluster_star_count = 2000\n",
    "\n",
    "def find_mass_average(cluster_stars, method='average'):\n",
    "    \"\"\"Gets the mass average for star clusters\n",
    "    \n",
    "    Longer description\n",
    "    \n",
    "    Args:\n",
    "        cluster_stars (list): Cluster data (dar una mejor descripcion)\n",
    "        method (str): A method to calculate the average. Default, 'average'.\n",
    "        \n",
    "    Returns:\n",
    "        mass_average (float): Average of mass in cluster \n",
    "    \n",
    "    Raises: \n",
    "        NotImplementedError if method is different than 'average'.\n",
    "    \"\"\"\n",
    "    \n",
    "    if method == 'average':\n",
    "        return numpy.average(cluster_stars, axis=None)\n",
    "    else:\n",
    "        raise NotImplementedError"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clases\n",
    "\n",
    "Clases usan CamelCase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-09-09T20:05:49.030999Z",
     "start_time": "2019-09-09T20:05:48.982703Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class SomeClass(object):\n",
    "    \n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    \n",
    "class MyAwesomeClass(object):\n",
    "    \n",
    "    def __init__(self, some_argument):\n",
    "        self.some_attribute = some_argument\n",
    "        self._protected_attribute = 0\n",
    "        self.__private_attribute = 1\n",
    "        \n",
    "    def __call__(self, other_argument):\n",
    "        if other_argument is not None:\n",
    "            print(\"The other argument {}\".format(other_argument))\n",
    "        else:\n",
    "            print(\"Argument is None\")\n",
    "            \n",
    "    def __repr__(self):\n",
    "        return \"This is a string that describes my class\"\n",
    "    \n",
    "    def __str__(self):\n",
    "        pass\n",
    "    \n",
    "    def _protected_method(self):\n",
    "        \"\"\"This method is intended for internal use only\"\"\"\n",
    "        self.some_attribute = 5\n",
    "        \n",
    "    def __private_method(self):\n",
    "        \"\"\"this method is not exposed\"\"\"\n",
    "        return False\n",
    "    \n",
    "    @property\n",
    "    def attribute(self):\n",
    "        return self._protected_attribute\n",
    "    \n",
    "    @attribute.setter\n",
    "    def attribute(self, value):\n",
    "        if isinstance(value, SomeClass):\n",
    "            return\n",
    "        else:\n",
    "            self._protected_attribute = value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-09-09T20:12:24.348520Z",
     "start_time": "2019-09-09T20:12:24.338191Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a string that describes my class\n",
      "5\n",
      "The other argument a\n"
     ]
    }
   ],
   "source": [
    "instancia = MyAwesomeClass(some_argument=1)\n",
    "print(instancia)\n",
    "\n",
    "instancia.attribute = 5\n",
    "print(instancia.attribute)\n",
    "\n",
    "instancia(other_argument='a')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Otras reglas\n",
    "\n",
    "- Identation tiene que ser de 4 espacios. No tabs porque pueden ser definidos como N-espacios, aveces 4 a veces 8, etc.\n",
    "- Lineas deben tener como maximo 80 caracteres. (no olvidar el Zen de Python). En algunos casos para mejorar legibilidad no importa si se pasa, pero no abusar.\n",
    "- El espacio en blanco entre funciones es de 2 lineas.\n",
    "- El espacio en blanco entre dos metodos de una clase es 1 linea."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Documentacion\n",
    "\n",
    "La documentacion es **extremadamente importante** y debe ser considerada prioridad.\n",
    "\n",
    "La documentacion puede ser en forma de Docstrings [PEP256](https://www.python.org/dev/peps/pep-0257/) define reglas generales, sin embargo existen distintos estilos.\n",
    "Ver [este link](https://www.datacamp.com/community/tutorials/docstrings-python).\n",
    "\n",
    "Aca hay dos ejemplos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-09-06T16:14:58.019351Z",
     "start_time": "2019-09-06T16:14:58.004581Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def funcion_1(argumento_1):\n",
    "    \"\"\"Este es el estilo de Google\n",
    "    \n",
    "    Aca va una descripcion mas larga de la funcion.\n",
    "    \n",
    "    Args:\n",
    "        argumento_1 (str): Buena descripcion del argumento\n",
    "    \"\"\"\n",
    "    pass\n",
    "\n",
    "\n",
    "def funcion_2(argumento_1):\n",
    "    \"\"\"\n",
    "    Este es el estilo de Numpy\n",
    "    \n",
    "    Aca va una descripcion mas larga de la funcion.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    \n",
    "    argumento_1 : str\n",
    "        Buena descripcion del argumento\n",
    "        \n",
    "    \"\"\"\n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nuevamente, lo importante es ser consistente.\n",
    "\n",
    "Evitar comentarios (inline comments)\n",
    "\n",
    "\n",
    "Recomiendo usar ReadTheDocs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing\n",
    "\n",
    "De primero suena un poco exagerado pero es un requisito muy importante para un buen software. Con pruebas bien definidas el desarrollador puede olvidarse de la mantencion y estar seguro de que su software esta bien.\n",
    "\n",
    "Tambien permite detectar fallas cuando alguna dependencia se actualiza y viene con errores.\n",
    "\n",
    "Incluso las _paginas web_ requieren testing.\n",
    "\n",
    "\n",
    "Ejemplo:\n",
    "\n",
    "**El Codigo**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-09-09T20:21:01.787556Z",
     "start_time": "2019-09-09T20:21:01.780847Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def suma_enteros(a, b):\n",
    "    \"\"\"Suma dos enteros\n",
    "    \n",
    "    Args:\n",
    "       a (int): Primer numero para sumar\n",
    "       b (int): Segundo numero para sumar\n",
    "       \n",
    "    Returns:\n",
    "      c (int): Suma de a + b\n",
    "    \"\"\"\n",
    "    c = a + b\n",
    "    return c\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**La Prueba**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-09-06T16:28:08.427774Z",
     "start_time": "2019-09-06T16:28:08.416995Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def test_suma_enteros():\n",
    "    a = 1\n",
    "    b = 2\n",
    "    expected_result = 3\n",
    "    \n",
    "    c = suma_enteros(a=a, b=b)\n",
    "    \n",
    "    assert type(c) == int\n",
    "    assert c == expected_result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Existen herramientas como `pytest` o `unittest`. Otro ejemplo, util para funciones o clases mas complejas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-09-06T18:47:52.905811Z",
     "start_time": "2019-09-06T18:47:52.860855Z"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from unittest import TestCase, skip\n",
    "# import suma_enteros\n",
    "\n",
    "class SumaEnterosTest(TestCase):\n",
    "    \n",
    "    def setUp(self):\n",
    "        \"\"\"Crea archivos o variables que definen condiciones iniciales para ejecutar las pruebas\"\"\"\n",
    "        self.a = 1\n",
    "        self.b = 2\n",
    "        self.c = 3\n",
    "        \n",
    "    def tearDown(self):\n",
    "        \"\"\"Elimina cualquier archivo que se pueda crear para ejecutar la prueba o a consecuencia de ejecutar la prueba.\"\"\"\n",
    "        pass\n",
    "    \n",
    "    def test_suma_enteros(self):\n",
    "        c = suma_enteros(a=self.a, b=self.b)\n",
    "        self.assertEqual(self.c, c)\n",
    "        self.assertIsInstance(c, int)\n",
    "        \n",
    "    @skip\n",
    "    def test_suma_enteros_wrong_input(self):\n",
    "        pass\n",
    "    \n",
    "    def test_suma_enteros_force_to_fail(self):\n",
    "        self.fail()\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-09-06T16:26:01.552355Z",
     "start_time": "2019-09-06T16:26:01.546262Z"
    }
   },
   "source": [
    "**Coverage:** Porcentaje de lineas relevantes que han sido probadas. Puede ser un poco enganoso, en particular si las pruebas no son buenas.\n",
    "\n",
    "[![Coverage Status](https://coveralls.io/repos/github/soar-telescope/goodman_pipeline/badge.svg?branch=master)](https://coveralls.io/github/soar-telescope/goodman_pipeline?branch=master)[![Coverage Status](https://coveralls.io/repos/github/soar-telescope/goodman_focus/badge.svg?branch=master)](https://coveralls.io/github/soar-telescope/goodman_focus?branch=master)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CI/CD\n",
    "**Continuous Integration:** Crear _builds_ muy seguido, integrando codigo de distintos desarrolladores.\n",
    "\n",
    "**Continuous Deployment:** Mantener el codigo _deployable_ todo el tiempo.\n",
    "\n",
    "### Herramientas\n",
    "\n",
    "(solo dos de las que uso yo, pero hay muchas mas)\n",
    "\n",
    "[Travis](https://travis-ci.org/soar-telescope/goodman_pipeline)\n",
    "\n",
    "[Jenkins](http://soardata1:8080/job/GoodmanPipeline/)\n",
    "\n",
    "Tambien se usan los badges.\n",
    "\n",
    "[![Build Status](https://travis-ci.org/soar-telescope/goodman_pipeline.svg?branch=master)](https://travis-ci.org/soar-telescope/goodman_pipeline)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Control de Version\n",
    "\n",
    "Otra cosa que un desarrollador no puede ignorar es usar alguna herramienta de control de version. `git` es lo mas popular por el momento. \n",
    "\n",
    "### GitHub\n",
    "GitHub es un servidor git con muchas buenas herramientas extras. En alguna conferencia escuche que hay gente escribiendo papers usando github. Se pueden escribir wikis pero yo no soy un fan de eso, prefiero ReadTheDocs.\n",
    "\n",
    "Conceptos de github.\n",
    "\n",
    "- Organizacion\n",
    "- Repositorio\n",
    "- Fork\n",
    "- Clone\n",
    "- remote\n",
    "- commit\n",
    "- push \n",
    "- pull\n",
    "- rebase\n",
    "- squash\n",
    "- pull request\n",
    "\n",
    "#### Issues\n",
    "\n",
    "Permiten trackear problemas especificos, se puede copiar codigo, imagenes, referenciar, etc. Tambien pueden usarse como _helpdesk_ osea para asistir a usuarios.\n",
    "\n",
    "#### Releases\n",
    "\n",
    "Los releases son versiones que quedan congeladas (ver PyPI)\n",
    "\n",
    "## Versioning\n",
    "\n",
    "No es lo mismo que control de version pero si tiene que ver. Es un identificador que puede ser interpretado por _maquina_ y humano. Tambien sirve para definir requerimientos.\n",
    "\n",
    "[PEP440](https://www.python.org/dev/peps/pep-0440/) entrega informacion sobre la convencion para identificar las distintas versiones de un paquete. Tambien existe flexibilidad en cuanto a lo especifico, pero nuevamente hay que ser consistentes.\n",
    "\n",
    "En mi experiencia [Semantic Versioning](https://semver.org/) es la mejor opcion (PEP440 compliant), pero eso podria variar dependiendo de la app.\n",
    "\n",
    "```\n",
    "M.m.b.devN\n",
    "\n",
    "M: Major Release (API changes)\n",
    "m: Minor changes. (cambios considerables, como agregar una funcionalidad)\n",
    "b: Bug Fixes\n",
    "devN: version de desarrollo nro N.\n",
    "```\n",
    "\n",
    "Por ejemplo, las siguientes son versiones validas:\n",
    "\n",
    "```\n",
    "0.1.0.dev1 (primera version de desarrollo para llegar a la version 0.1.0)\n",
    "0.1.0  (primer release).\n",
    "0.2.1.dev3\n",
    "1.0.0 (super release)\n",
    "1.0.1 (bug fixing after 1.0.0)\n",
    "```\n",
    "\n",
    "Uno tiene libertad para decidir como incrementa la version pero denuevo..... consistencia.\n",
    "\n",
    "## PYPI (Python Package Index)\n",
    "\n",
    "Al subir los paquetes a PyPI luego se puede instalar usando \n",
    "\n",
    "`pip install my-package`\n",
    "\n",
    "\n",
    "Tambien hay ciertos pasos que cumplir.\n",
    "\n",
    "Usar `setup.cfg` para guardar configuracion. Ejemplo:\n",
    "\n",
    "```\n",
    "[build_docs]\n",
    "source-dir = docs\n",
    "build-dir = docs/_build\n",
    "all_files = 1\n",
    "\n",
    "[build_sphinx]\n",
    "project = 'Goodman Pipeline'\n",
    "source-dir = docs\n",
    "build-dir = docs/_build\n",
    "\n",
    "[upload_docs]\n",
    "upload-dir = docs/_build/html\n",
    "show-response = 1\n",
    "\n",
    "[metadata]\n",
    "package_name = goodman_pipeline\n",
    "description = Pipeline for reducing Goodman HTS data.\n",
    "long_description = Provides everything need to reduce Goodman High Throughput Spectrograph data.\n",
    "author = Simon Torres\n",
    "author_email = storres@ctio.noao.edu\n",
    "license = BSD-3-Clause\n",
    "# url =\n",
    "edit_on_github = False\n",
    "github_project = soar-telescope/goodman_pipeline\n",
    "install_requires =\n",
    "    numpy>=1.16.4\n",
    "    pandas==0.23.0\n",
    "    matplotlib>=3.0.1\n",
    "    scipy>=1.3.0\n",
    "    cython>=0.26.1\n",
    "    astropy>=3\n",
    "    ccdproc>=1.3.0.post1\n",
    "    astroplan\n",
    "# version should be PEP440 compatible (http://www.python.org/dev/peps/pep-0440)\n",
    "version = 1.3.0.dev3\n",
    "```\n",
    "\n",
    "Usar `setup.py` para importar informacion desde `setup.cfg`. Esta es una manera de hacerlo, lo importante es evitar la duplicidad de informacion. Por ejemplo el numero de version se almacena en `setup.cfg` luego `setup.py` lo toma y lo escribe en un archivo en `<package_name>/__version__.py`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-09-06T19:56:43.793607Z",
     "start_time": "2019-09-06T19:56:42.962929Z"
    }
   },
   "source": [
    "```python\n",
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "SOAR Telescope - Goodman Pipeline.\n",
    "\n",
    "Goodman High Throughput Spectrograph Data Reduction Pipeline.\n",
    "\n",
    "See:\n",
    "https://packaging.python.org/en/latest/distributing.html\n",
    "https://github.com/pypa/sampleproject\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "\n",
    "# Always prefer setuptools over distutils\n",
    "from setuptools import setup, find_packages\n",
    "\n",
    "# To use a consistent encoding\n",
    "from codecs import open\n",
    "\n",
    "\n",
    "here = os.path.abspath(os.path.dirname(__file__))\n",
    "\n",
    "\n",
    "def create_version_py(packagename, version, source_dir='.'):\n",
    "    package_dir = os.path.join(source_dir, packagename)\n",
    "    version_py = os.path.join(package_dir, 'version.py')\n",
    "\n",
    "    version_str = \"# This is an automatic generated file please do not edit\\n\" \\\n",
    "                  \"__version__ = '{:s}'\".format(version)\n",
    "\n",
    "    with open(version_py, 'w') as f:\n",
    "        f.write(version_str)\n",
    "\n",
    "\n",
    "# read content from README.md\n",
    "with open(os.path.join(here, 'README.md')) as f:\n",
    "    long_description = f.read()\n",
    "\n",
    "\n",
    "# Get configuration information from setup.cfg\n",
    "try:\n",
    "    from ConfigParser import ConfigParser\n",
    "except ImportError:\n",
    "    from configparser import ConfigParser\n",
    "conf = ConfigParser()\n",
    "\n",
    "\n",
    "# conf.read([os.path.join(os.path.dirname(__file__), '..', 'setup.cfg')])\n",
    "conf.read([os.path.join(os.path.dirname(__file__), 'setup.cfg')])\n",
    "metadata = dict(conf.items('metadata'))\n",
    "\n",
    "PACKAGENAME = metadata['package_name']\n",
    "\n",
    "VERSION = metadata['version']\n",
    "\n",
    "LICENSE = metadata['license']\n",
    "\n",
    "DESCRIPTION = metadata['description']\n",
    "\n",
    "LONG_DESCRIPTION = long_description\n",
    "\n",
    "LONG_DESCRIPTION_CONTENT_TYPE = 'text/markdown'\n",
    "\n",
    "AUTHOR = metadata['author']\n",
    "\n",
    "AUTHOR_EMAIL = metadata['author_email']\n",
    "\n",
    "INSTALL_REQUIRES = metadata['install_requires'].split()\n",
    "\n",
    "# freezes version information in version.py\n",
    "create_version_py(PACKAGENAME, VERSION)\n",
    "\n",
    "setup(\n",
    "    name=metadata['package_name'],\n",
    "\n",
    "    # Versions should comply with PEP440.  For a discussion on single-sourcing\n",
    "    # the version across setup.py and the project code, see\n",
    "    # https://packaging.python.org/en/latest/single_source_version.html\n",
    "    version=VERSION,\n",
    "\n",
    "    description=DESCRIPTION,\n",
    "\n",
    "    long_description=LONG_DESCRIPTION,\n",
    "\n",
    "    long_description_content_type=LONG_DESCRIPTION_CONTENT_TYPE,\n",
    "\n",
    "    # The project's main homepage.\n",
    "    url='https://github.com/soar-telescope/goodman_pipeline',\n",
    "\n",
    "    # Author details\n",
    "    author=u'Simon Torres R., '\n",
    "           u'Bruno Quint, '\n",
    "           u'Cesar Briceño, '\n",
    "           u'David Sanmartin, ',\n",
    "\n",
    "    author_email='storres@ctio.noao.edu, bquint@ctio.noao.edu, '\n",
    "                 'cbriceno@ctio.noao.edu',\n",
    "\n",
    "    # Choose your license\n",
    "    license=LICENSE,\n",
    "\n",
    "    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n",
    "    classifiers=[\n",
    "        'Development Status :: 5 - Production/Stable',\n",
    "        'Environment :: Console',\n",
    "\n",
    "        # Indicate who your project is intended for\n",
    "        'Intended Audience :: Developers',\n",
    "        'Intended Audience :: Education',\n",
    "        'Intended Audience :: Science/Research',\n",
    "\n",
    "        'License :: OSI Approved :: BSD License',\n",
    "\n",
    "        # Specify the Python versions you support here. In particular, ensure\n",
    "        # that you indicate whether you support Python 2, Python 3 or both.\n",
    "        'Programming Language :: Python :: 3.5',\n",
    "        'Programming Language :: Python :: 3.6',\n",
    "\n",
    "        'Natural Language :: English',\n",
    "\n",
    "        'Operating System :: POSIX :: Linux',\n",
    "        'Operating System :: POSIX :: Other',\n",
    "        'Operating System :: MacOS :: MacOS X',\n",
    "\n",
    "        'Topic :: Scientific/Engineering :: Astronomy',\n",
    "        'Topic :: Scientific/Engineering :: Information Analysis',\n",
    "        'Topic :: Software Development :: Libraries :: Python Modules',\n",
    "\n",
    "    ],\n",
    "\n",
    "    # What does your project relate to?\n",
    "    keywords='soar pipelines astronomy images spectroscopy',\n",
    "\n",
    "    # You can just specify the packages manually here if your project is\n",
    "    # simple. Or you can use find_packages().\n",
    "\n",
    "    packages=['goodman_pipeline',\n",
    "              'goodman_pipeline.core',\n",
    "              'goodman_pipeline.images',\n",
    "              'goodman_pipeline.spectroscopy',\n",
    "              'goodman_pipeline.wcs', ],\n",
    "\n",
    "    package_dir={'goodman_pipeline': 'goodman_pipeline'},\n",
    "\n",
    "    package_data={'goodman_pipeline': ['data/params/dcr.par',\n",
    "                                       'data/params/*.json',\n",
    "                                       'data/ref_comp/*fits',\n",
    "                                       'data/dcr-source/README.md',\n",
    "                                       'data/dcr-source/dcr/*',\n",
    "                                       'data/test_data/master_flat/*',\n",
    "                                       'data/test_data/wcs_data/*']},\n",
    "\n",
    "    install_requires=INSTALL_REQUIRES,\n",
    "\n",
    "    scripts=['goodman_pipeline/scripts/redccd',\n",
    "             'goodman_pipeline/scripts/redspec', ],\n",
    "\n",
    "   )\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Usar entrypoints en vez de scripts**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Team development Workflow\n",
    "\n",
    "En desarrollo en equipo se usa un repositorio central, aunque `git` no necesita un repositorio central para funcionar, se hace porque algun lugar tiene que serlo.\n",
    "\n",
    "Algunas definiciones para ejemplificar esto con github.\n",
    "\n",
    "- `soar-telescope` (github institution)\n",
    "- `simontorres` (github user)\n",
    "- `otrousuario` (otro github user)\n",
    "\n",
    "\n",
    "\n",
    "1. Crear el repositorio central `soar-telescope/mi-repo`\n",
    "2. Usuario `simontorres` crea un _fork_ del repositorio/proyecto `soar-telescope/mi-repo`.\n",
    "3. Ahora existe el repositorio `simontorres/mi-repo` que es un fork de `soar-telescope/mi-repo`. Estan relacionados.\n",
    "4. Usuario debe hacer un clone de `simontorres/mi-repo` localmente\n",
    "   `git clone git@github.com:simontorres/mi-repo.git`\n",
    "   \n",
    "5. Setup Remotes.\n",
    "\n",
    "   `origin: git@github.com:simontorres/mi-repo.git`\n",
    "   `upstream: git@github.com:soar-telescope/mi-repo.git`\n",
    "   \n",
    "5. `otrousuario` hace lo mismo (fork, clone, setup remotes)\n",
    "\n",
    "   `origin: git@github.com:otrousuario/mi-repo.git`\n",
    "   `upstream: git@github.com:soar-telescope/mi-repo.git`\n",
    "   \n",
    "6. `simontorres` quiere implementar una funcion que haga cross-correlation. Por defecto la branch principal se llama `master`.\n",
    "\n",
    "7. Crear una nueva _branch_ a partir de `master` llamada `implementar_cross_correlation` y hacer checkout de la branch.\n",
    "8. Hacer los cambios y cuando este listo hacer _commit_ de los cambios y _push_ para subirlos a `simontorres/mi-repo`.\n",
    "9. En `soar-telescope/mi-repo` hacer un _pull request_ que comparara `soar-telescope:master` con `simontorres:implementear_cross_correlation`.\n",
    "10. Travis va hacer un _merge_ de los nuevos cambios en `implementar_cross_correlation` y va a ejecutar las pruebas para ver si algo se rompe. Si se rompe `simontorres` debe corregirlos y hacer un _commit + push_ denuevo.\n",
    "11. El mantenedor/es de `soar-telescope/mi-repo` puede aprobar o desaprobar el pull request. Si es aprobado los nuevos cambios pasan a ser parte de `soar-telescope/mi-repo:master`\n",
    "12. `otrousuario` puede implementar otra cosa en paralelo. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tips de Desarrollo\n",
    "\n",
    "- Usar Jupyter Notebooks. Sirve como documentacion. Para compartirlos publicamente usar GitHub + NbViewer, por ejemplo\n",
    "\n",
    "https://nbviewer.jupyter.org/github/simontorres/general_documentation/blob/master/jupyter-notebooks/pipeline_development/Transition_to_live_reduction.ipynb\n",
    "\n",
    "- Conocer Markdown y reStructuredText (rst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Virtual Environment (conda)\n",
    "\n",
    "Permiten manejar distintas librerias con sus respectivas dependencias en un un sistema y activarlos o desactivarlos cuando se quiera."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Docker\n",
    "\n",
    "Un sistema de virtualizacion super eficiente."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ideas\n",
    "(de algunas conferencias)\n",
    "\n",
    "## Code Review\n",
    "\n",
    "Juntarse y compartir codigo, tips, preguntas, etc.\n",
    "\n",
    "\n",
    "## Hacking Sessions\n",
    "\n",
    "Juntarse a trabajar en un mismo proyecto, no necesariamente se ataca el mismo problema.\n",
    "\n",
    "Cerrar issues olvidados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
<<<<<<< HEAD
   "version": "3.7.4"
=======
   "version": "3.7.3"
>>>>>>> d34c56a68ed8c4a05a630c70043263fa4bd94e3f
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "384px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
